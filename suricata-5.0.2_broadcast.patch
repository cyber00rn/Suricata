diff -Naur suricata-5.0.2/src/Makefile.am suricata-5.0.2_custom/src/Makefile.am
--- suricata-5.0.2/src/Makefile.am	2020-04-15 14:06:51.365097500 +0800
+++ suricata-5.0.2_custom/src/Makefile.am	2020-04-15 14:05:37.447973000 +0800
@@ -529,7 +529,8 @@
 win32-syscall.c win32-syscall.h \
 win32-misc.c win32-misc.h \
 win32-service.c win32-service.h \
-win32-syslog.h
+win32-syslog.h \
+broadcast_json.c broadcast_json.h
 
 EXTRA_DIST = tests
 
diff -Naur suricata-5.0.2/src/broadcast_json.c suricata-5.0.2_custom/src/broadcast_json.c
--- suricata-5.0.2/src/broadcast_json.c	1970-01-01 08:00:00.000000000 +0800
+++ suricata-5.0.2_custom/src/broadcast_json.c	2020-04-15 14:05:37.450902600 +0800
@@ -0,0 +1,70 @@
+#include <stdio.h>
+#include <stdlib.h>
+#include <unistd.h>
+#include <errno.h>
+#include <string.h>
+#include <sys/types.h>
+#include <sys/socket.h>
+#include <netinet/in.h>
+#include <arpa/inet.h>
+#include <netdb.h>
+
+#define SERVERPORT 59487 // 所要連線的 port
+#define IPV4_LOCALHOST "127.0.0.1"
+
+#include "broadcast_json.h"
+
+static int default_localfd;
+static struct sockaddr_in localhost_addr;
+static int default_broadcast = 1;
+
+int broadcast_init(void) {
+    if ((default_localfd = socket(AF_INET, SOCK_DGRAM, 0)) == -1) {
+        perror("socket");
+        return 1;
+    }
+    // 這個 call 就是要讓 sockfd 可以送廣播封包
+	if (setsockopt(default_localfd, SOL_SOCKET, SO_BROADCAST, &default_broadcast, sizeof default_broadcast) == -1) {
+		perror("setsockopt (SO_BROADCAST)");
+		return 1;
+	}
+    localhost_addr.sin_family = AF_INET; // host byte order
+	localhost_addr.sin_port = htons(SERVERPORT); // short, network byte order
+	localhost_addr.sin_addr.s_addr = inet_addr(IPV4_LOCALHOST);
+	memset(localhost_addr.sin_zero, '\0', sizeof localhost_addr.sin_zero);
+    return 0;
+}
+
+int broadcast_message(char *message, size_t length) {
+    int numbytes = 0;
+    if ((numbytes=sendto(default_localfd, message, length, 0, (struct sockaddr *)&localhost_addr, sizeof(localhost_addr))) < 0) {
+		perror("sendto");
+		return numbytes;
+	}
+    return numbytes;
+}
+
+int broadcast_exit(void) {
+    return close(default_localfd);
+}
+#ifdef __BROADCAST_JSON_TEST__
+int main(int argc, char *argv[])
+{
+	if(broadcast_init() != 0)
+        exit(1);
+    
+    int numbytes = 0;
+
+    if((numbytes=broadcast_message(argv[1], strlen(argv[1]))) < 0) 
+        exit(1);
+
+    printf("sent %d bytes to %s\n", numbytes, inet_ntoa(localhost_addr.sin_addr));
+
+    if((numbytes=broadcast_message(argv[1], strlen(argv[1]))) < 0) 
+        exit(1);
+
+    printf("sent %d bytes to %s\n", numbytes, inet_ntoa(localhost_addr.sin_addr));
+
+	return broadcast_exit();
+}
+#endif
diff -Naur suricata-5.0.2/src/broadcast_json.h suricata-5.0.2_custom/src/broadcast_json.h
--- suricata-5.0.2/src/broadcast_json.h	1970-01-01 08:00:00.000000000 +0800
+++ suricata-5.0.2_custom/src/broadcast_json.h	2020-04-15 14:05:37.449926200 +0800
@@ -0,0 +1,10 @@
+#ifndef __BROADCAST_JSON_H__
+#define __BROADCAST_JSON_H__
+
+#include <stdio.h>
+
+int broadcast_init(void);
+int broadcast_message(char *message, size_t length);
+int broadcast_exit(void);
+
+#endif /* __BROADCAST_JSON_H__ */
diff -Naur suricata-5.0.2/src/output-json-alert.c suricata-5.0.2_custom/src/output-json-alert.c
--- suricata-5.0.2/src/output-json-alert.c	2020-04-15 14:06:51.575986600 +0800
+++ suricata-5.0.2_custom/src/output-json-alert.c	2020-04-15 14:05:36.747989800 +0800
@@ -99,6 +99,8 @@
 
 #define JSON_STREAM_BUFFER_SIZE 4096
 
+#include "broadcast_json.h"
+
 typedef struct AlertJsonOutputCtx_ {
     LogFileCtx* file_ctx;
     uint16_t flags;
@@ -593,6 +595,10 @@
             }
         }
 
+        char *message = json_dumps(js, 0);
+        int sended = broadcast_message(message, strlen(message));
+        free(message);
+
         OutputJSONBuffer(js, aft->file_ctx, &aft->json_buffer);
         json_object_del(js, "alert");
     }
@@ -751,6 +757,8 @@
     memset(aft, 0, sizeof(JsonAlertLogThread));
 
     SCFree(aft);
+
+    broadcast_exit();
     return TM_ECODE_OK;
 }
 
@@ -996,4 +1004,6 @@
         "eve-log.alert", JsonAlertLogInitCtxSub, JsonAlertLogger,
         JsonAlertLogCondition, JsonAlertLogThreadInit, JsonAlertLogThreadDeinit,
         NULL);
+
+    broadcast_init();
 }
